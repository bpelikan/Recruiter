@using Recruiter.Models.MyApplicationViewModels
@model MyApplicationDetailsViewModel

@{
    ViewData["Title"] = "My Application Details";
}

<h2>My application details</h2>

<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.User)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.User.FirstName) @Html.DisplayFor(model => model.User.LastName) (@Html.DisplayFor(model => model.User.Email))
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.JobPosition)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.JobPosition.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.CvFileUrl)
        </dt>
        <dd>
            <a href="@Model.CvFileUrl" target="_blank">Otwórz plik CV</a>
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.CreatedAt)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.CreatedAt)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.ApplicationViews)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.ApplicationViews) (@Html.DisplayFor(model => model.ApplicationViewsAll))
        </dd>
        <dt>
            Stages
        </dt>
        <dd>
            @foreach (var stage in Model.ApplicationStages)
            {
                <span condition="stage.Accepted" class="glyphicon glyphicon-ok"></span>
                <span condition="!stage.Accepted && stage.State == ApplicationStageState.Finished" class="glyphicon glyphicon-remove"></span>
                @switch (stage.GetType().Name)
                {
                    case "ApplicationApproval":
                        @:Akceptacja aplikacji
                        break;
                    case "PhoneCall":
                        @:Rozmowa telefoniczna
                        break;
                    case "Homework":
                        @:Zadanie domowe
                        break;
                    case "Interview":
                        @:Rozmowa kwalifikacyjna
                        break;
                }
                <b Condition='!stage.Accepted &&
                                    (stage.GetType().Name != "Homework" && stage.State != ApplicationStageState.Finished ||
                                        (stage.GetType().Name == "Homework" && stage.State == ApplicationStageState.Waiting))'>
                    @*(@Html.DisplayFor(model => stage.State))*@
                    @switch (stage.State)
                    {
                        case ApplicationStageState.Waiting:
                            @:(Oczekiwanie)
                            break;
                        case ApplicationStageState.InProgress:
                            @:(W trakcie)
                            break;
                        case ApplicationStageState.Finished:
                            @:(Zakończone)
                            break;
                    }
                </b>

                @if (stage.GetType().Name == "Homework")
                {
                    if (stage.State == ApplicationStageState.InProgress)
                    {
                        switch ((stage as Homework).HomeworkState)
                        {
                            case HomeworkState.WaitingForSpecification:
                                <b>
                                    @*(@Html.DisplayFor(model => stage.State))*@
                                    @switch (stage.State)
                                    {
                                        case ApplicationStageState.Waiting:
                                            @:(Oczekiwanie)
                                            break;
                                        case ApplicationStageState.InProgress:
                                            @:(W trakcie)
                                            break;
                                        case ApplicationStageState.Finished:
                                            @:(Zakończone)
                                            break;
                                    }
                                </b>
                                @:- Oczekiwanie na zadanie domowe
                                break;
                            case HomeworkState.WaitingForRead:
                                <a asp-controller="MyApplication" 
                                    asp-action="ProcessMyHomework" 
                                    asp-route-stageId="@stage.Id" 
                                    asp-route-applicationId="@stage.ApplicationId" 
                                    asp-route-returnUrl="@Context.Request.Path">
                                    <b>
                                        @*(@Html.DisplayFor(model => stage.State))*@
                                        @switch (stage.State)
                                        {
                                            case ApplicationStageState.Waiting:
                                                @:(Oczekiwanie)
                                                break;
                                            case ApplicationStageState.InProgress:
                                                @:(W trakcie)
                                                break;
                                            case ApplicationStageState.Finished:
                                                @:(Zakończone)
                                                break;
                                        }
                                        - przeczytaj zadanie domowe
                                    </b>
                                </a>
                                break;
                            case HomeworkState.WaitingForSendHomework:
                                <a asp-controller="MyApplication" 
                                    asp-action="ProcessMyHomework" 
                                    asp-route-stageId="@stage.Id" 
                                    asp-route-applicationId="@stage.ApplicationId" 
                                    asp-route-returnUrl="@Context.Request.Path">
                                    <b>
                                        @*(@Html.DisplayFor(model => stage.State))*@
                                        @switch (stage.State)
                                        {
                                            case ApplicationStageState.Waiting:
                                                @:(Oczekiwanie)
                                                break;
                                            case ApplicationStageState.InProgress:
                                                @:(W trakcie)
                                                break;
                                            case ApplicationStageState.Finished:
                                                @:(Zakończone)
                                                break;
                                        }
                                        - wyslij zadanie domowe
                                    </b>
                                </a>
                                break;
                            case HomeworkState.Completed:
                                <a asp-controller="MyApplication" 
                                    asp-action="ProcessMyHomework" 
                                    asp-route-stageId="@stage.Id" 
                                    asp-route-applicationId="@stage.ApplicationId" 
                                    asp-route-returnUrl="@Context.Request.Path">
                                    <b>
                                        @*(@Html.DisplayFor(model => stage.State))*@
                                        @switch (stage.State)
                                        {
                                            case ApplicationStageState.Waiting:
                                                @:(Oczekiwanie)
                                                break;
                                            case ApplicationStageState.InProgress:
                                                @:(W trakcie)
                                                break;
                                            case ApplicationStageState.Finished:
                                                @:(Zakończone)
                                                break;
                                        }
                                        - pokaż moje zadanie domowe
                                    </b>
                                </a>
                                break;
                        }
                    }
                    else if (stage.State == ApplicationStageState.Finished)
                    {
                        <a Condition="(stage as Homework).HomeworkState == HomeworkState.Completed" 
                            asp-controller="MyApplication" 
                            asp-action="ProcessMyHomework" 
                            asp-route-stageId="@stage.Id"
                            asp-route-applicationId="@stage.ApplicationId"
                            asp-route-returnUrl="@Context.Request.Path" >
                                <b> - pokaż moje zadanie domowe</b>
                        </a>
                    }
                }
                else if (stage.GetType().Name == "Interview")
                {
                    if (stage.State == ApplicationStageState.InProgress)
                    {
                        switch ((stage as Interview).InterviewState)
                        {
                            case InterviewState.WaitingForSettingAppointments:
                                @:- Waiting for Setting Appointments Oczekiwanie na spotkanie
                                break;
                            case InterviewState.RequestForNewAppointments:
                                @:- Waiting for Setting another Appointments  Oczekiwanie na ponowne spotkanie
                                break;
                            case InterviewState.WaitingForConfirmAppointment:
                                <a asp-controller="MyApplication" 
                                    asp-action="ConfirmInterviewAppointments" 
                                    asp-route-stageId="@stage.Id" 
                                    asp-route-returnurl="@Context.Request.Path">
                                        <b> - Potwierdź spotkanie</b>
                                </a>
                                @*@:- confirm your Appointment*@
                                break;
                            case InterviewState.AppointmentConfirmed:
                                @:- Spotkanie potwierdzone: 
                                <b Condition="Model.ConfirmedInterviewAppointment != null">
                                    @Html.DisplayFor(model => model.ConfirmedInterviewAppointment.StartTime)
                                    (Czas trwania: @Html.DisplayFor(model => model.ConfirmedInterviewAppointment.Duration) min)
                                </b>
                                break;
                                
                        }
                    }
                }
                <br />
            }

        </dd>

    </dl>
</div>

<form asp-action="DeleteMyApplication" asp-route-id="@Model.Id" asp-route-returnurl="@Context.Request.Path" method="post">
    <button type="submit" onclick="return confirm('Do you really want to delete this application?');" class="btn btn-sm btn-danger">
        Usuń
    </button>
    <a condition="@ViewData["ReturnUrl"] != null" class="btn btn-sm btn-default" href="@ViewData["ReturnUrl"]">Wróć</a>
    <a condition="@ViewData["ReturnUrl"] == null" class="btn btn-sm btn-default" asp-action="MyApplications">Wróć</a>
</form>